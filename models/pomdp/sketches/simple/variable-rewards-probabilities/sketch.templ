// for each normal state, there is a trap state
// the penalty for getting from trap to normal state is 100
// the holes determine the probaiblity to reach trap/normal state

// pomdp quotient: s=5, ch=7
// smg abstraction: s=10, ch=12

pomdp

hole double h0 in {0.1, 0.9};
hole double h1 in {0.2, 1.0};

formula goal = s=2 & trap=false;

observable "trap" = trap;
observable "finished" = goal;

label "goal" = goal;

module state_space
    s : [0..2] init 0;
    trap : bool init false;

    // state 0 has penalty 10 or 90 based on h0
    [a] !trap & s=0 -> h0 : (s'=1)&(trap'=true) + 1-h0 : (s'=1);
    // state s1 has penalty 20 or 100 based on h1
    [a] !trap & s=1 -> h1 : (s'=2)&(trap'=true) + 1-h1 : (s'=2);
    []  !trap & s=2 -> true;

    [penalty] trap -> 1 : (trap'=false);
endmodule

rewards "penalty"
    [penalty] true : 100;
endrewards