pomdp

// arena definition
const int WIDTH = 5;
const int HEIGHT = 3;

const int xMIN = 0;
const int xMAX = WIDTH-1;
const int yMIN = 0;
const int yMAX = HEIGHT-1;

// holes
hole double h1 in {0.1, 0.2, 0.8, 0.9};
hole double h2 in {0.1, 0.2, 0.8, 0.9};

const int oy = 1;
const int o1x = 1;
const int o2x = 3;

// goal
formula goal = x=xMAX & y=yMIN & traped=false;
label "goal" = goal;

// movement
formula canGoRight = x<xMAX & traped=false;
formula canGoDown  = y>yMIN & traped=false;
formula canGoUp    = y<yMAX & traped=false;

formula leftOfObstacle = y=1 & (x=o1x-1|x=o2x-1);
formula aboveObstacle = y=2 & (x=o1x|x=o2x);
formula belowObstacle = y=0 & (x=o1x|x=o2x);

formula goRight = leftOfObstacle ? x : min(x+1, xMAX);
formula goDown  = aboveObstacle ? y : max(y-1, yMIN);
formula goUp    = belowObstacle ? y : min(y+1, yMAX);

formula noTrap = (x!=1 | y!=2) & (x!=3 | y!=2) & (x!=1 | y!=0) & (x!=3 | y!=0);

// agent
module agent
    x : [xMIN..xMAX] init xMIN;
    y : [yMIN..yMAX] init yMAX;
    traped : bool init false;

    [r] !traped & noTrap -> (x'=goRight);
    [d] !traped & noTrap -> (y'=goDown);
    [u] !traped & noTrap -> (y'=goUp);

    [r] !traped & x=1&y=2 -> h1 : (x'=goRight)&(traped'=true) + 1-h1 : (x'=goRight);
    [d] !traped & x=1&y=2 -> h1 : (y'=goDown)&(traped'=true) + 1-h1 : (y'=goDown);
    [u] !traped & x=1&y=2 -> h1 : (y'=goUp)&(traped'=true) + 1-h1 : (y'=goUp);

    [r] !traped & x=3&y=2 -> 1-h1 : (x'=goRight)&(traped'=true) + h1 : (x'=goRight);
    [d] !traped & x=3&y=2 -> 1-h1 : (y'=goDown)&(traped'=true) + h1 : (y'=goDown);
    [u] !traped & x=3&y=2 -> 1-h1 : (y'=goUp)&(traped'=true) + h1 : (y'=goUp);

    [r] !traped & x=1&y=0 -> h2 : (x'=goRight)&(traped'=true) + 1-h2 : (x'=goRight);
    [d] !traped & x=1&y=0 -> h2 : (y'=goDown)&(traped'=true) + 1-h2 : (y'=goDown);
    [u] !traped & x=1&y=0 -> h2 : (y'=goUp)&(traped'=true) + 1-h2 : (y'=goUp);

    [r] !traped & x=3&y=0 -> 1-h2 : (x'=goRight)&(traped'=true) + h2 : (x'=goRight);
    [d] !traped & x=3&y=0 -> 1-h2 : (y'=goDown)&(traped'=true) + h2 : (y'=goDown);
    [u] !traped & x=3&y=0 -> 1-h2 : (y'=goUp)&(traped'=true) + h2 : (y'=goUp);

    [p] traped -> 1 : (traped'=false);

endmodule

// observables
observable "finished" = goal;
observable "traped" = traped;
observable "canGoRight" = canGoRight;
observable "canGoDown" = canGoDown;
observable "canGoUp" = canGoUp;

// rewards
rewards "penalty"
    [r] true : 1;
    [d] true : 1;
    [u] true : 1;

    [p] true : 100;
endrewards